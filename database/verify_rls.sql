-- =====================================================
-- SCRIPT DE VERIFICA√á√ÉO RLS (ROW LEVEL SECURITY)
-- =====================================================

-- 1. VERIFICAR SE RLS EST√Å HABILITADO
-- =====================================================
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS Habilitado'
        ELSE '‚ùå RLS Desabilitado'
    END as status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('users', 'companies', 'entries')
ORDER BY tablename;

-- 2. VERIFICAR POL√çTICAS EXISTENTES
-- =====================================================
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd as command_type,
    CASE 
        WHEN qual IS NOT NULL THEN '‚úÖ Pol√≠tica Configurada'
        ELSE '‚ùå Pol√≠tica Sem Condi√ß√£o'
    END as policy_status
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- 3. VERIFICAR FUN√á√ïES DE SEGURAN√áA
-- =====================================================
SELECT 
    routine_name,
    routine_type,
    security_type,
    CASE 
        WHEN routine_name = 'handle_new_user' THEN '‚úÖ Fun√ß√£o de Cria√ß√£o de Usu√°rio'
        WHEN routine_name = 'is_admin' THEN '‚úÖ Fun√ß√£o de Verifica√ß√£o Admin'
        ELSE 'üìã Outra Fun√ß√£o'
    END as function_purpose
FROM information_schema.routines 
WHERE routine_schema = 'public' 
AND routine_name IN ('handle_new_user', 'is_admin')
ORDER BY routine_name;

-- 4. VERIFICAR TRIGGERS
-- =====================================================
SELECT 
    trigger_name,
    event_manipulation,
    event_object_table,
    action_timing,
    CASE 
        WHEN trigger_name = 'on_auth_user_created' THEN '‚úÖ Trigger de Cria√ß√£o Autom√°tica'
        ELSE 'üìã Outro Trigger'
    END as trigger_purpose
FROM information_schema.triggers 
WHERE trigger_schema = 'public' 
OR (trigger_schema = 'auth' AND trigger_name = 'on_auth_user_created')
ORDER BY trigger_name;

-- 5. VERIFICAR √çNDICES DE PERFORMANCE
-- =====================================================
SELECT 
    schemaname,
    tablename,
    indexname,
    indexdef,
    CASE 
        WHEN indexname LIKE '%auth_user_id%' THEN '‚úÖ √çndice de Autentica√ß√£o'
        WHEN indexname LIKE '%user_id%' THEN '‚úÖ √çndice de Usu√°rio'
        WHEN indexname LIKE '%email%' THEN '‚úÖ √çndice de Email'
        ELSE 'üìã Outro √çndice'
    END as index_purpose
FROM pg_indexes 
WHERE schemaname = 'public' 
AND tablename IN ('users', 'companies', 'entries')
AND indexname NOT LIKE '%pkey'
ORDER BY tablename, indexname;

-- 6. VERIFICAR INTEGRIDADE DOS DADOS
-- =====================================================

-- Contar usu√°rios
SELECT 
    'public.users' as tabela,
    COUNT(*) as total_registros,
    COUNT(auth_user_id) as com_auth_id,
    COUNT(*) - COUNT(auth_user_id) as sem_auth_id
FROM public.users
UNION ALL
SELECT 
    'auth.users' as tabela,
    COUNT(*) as total_registros,
    COUNT(id) as com_auth_id,
    0 as sem_auth_id
FROM auth.users;

-- 7. VERIFICAR PERMISS√ïES
-- =====================================================
SELECT 
    grantee,
    table_schema,
    table_name,
    privilege_type,
    is_grantable,
    CASE 
        WHEN grantee = 'authenticated' THEN '‚úÖ Usu√°rio Autenticado'
        WHEN grantee = 'anon' THEN '‚ö†Ô∏è Usu√°rio An√¥nimo'
        ELSE 'üìã Outro Role'
    END as role_type
FROM information_schema.role_table_grants 
WHERE table_schema = 'public' 
AND table_name IN ('users', 'companies', 'entries')
ORDER BY table_name, grantee, privilege_type;

-- 8. TESTE DE SEGURAN√áA (SIMULA√á√ÉO)
-- =====================================================

-- Verificar se existe fun√ß√£o de teste
DO $$
BEGIN
    -- Verificar se as fun√ß√µes essenciais existem
    IF NOT EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'handle_new_user') THEN
        RAISE WARNING '‚ùå Fun√ß√£o handle_new_user n√£o encontrada!';
    ELSE
        RAISE NOTICE '‚úÖ Fun√ß√£o handle_new_user encontrada';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin') THEN
        RAISE WARNING '‚ùå Fun√ß√£o is_admin n√£o encontrada!';
    ELSE
        RAISE NOTICE '‚úÖ Fun√ß√£o is_admin encontrada';
    END IF;
    
    -- Verificar se o trigger existe
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.triggers 
        WHERE trigger_name = 'on_auth_user_created'
    ) THEN
        RAISE WARNING '‚ùå Trigger on_auth_user_created n√£o encontrado!';
    ELSE
        RAISE NOTICE '‚úÖ Trigger on_auth_user_created encontrado';
    END IF;
END $$;

-- =====================================================
-- RESUMO DA VERIFICA√á√ÉO
-- =====================================================

SELECT 
    'üîí VERIFICA√á√ÉO DE SEGURAN√áA CONCLU√çDA' as status,
    'Verifique os resultados acima para garantir que tudo est√° configurado corretamente' as instrucoes;